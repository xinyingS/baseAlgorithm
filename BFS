Binary Tree Level BFS

一、
public class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {

        List<List<Integer>> results = new ArrayList<List<Integer>>();

        if(root == null){
            return results;
        }

        Queue<TreeNode> queue = new LinkedList<>();

        //1. 把所有的起点（把第一层的节点）放到queue里
        queue.offer(root);

        //2. while循环
        while(!queue.isEmpty()){
            int size = queue.size();
            List<Integer> level = new ArrayList<>();

            //3. for当前层，拓展（生）出下一层
            for(int i = 0; i < size; i++){
                TreeNode node = queue.poll();
                level.add(node.val);
                if(node.left != null){
                    queue.offer(node.left);
                }
                if(node.right != null){
                    queue.offer(node.right);
                }
            }
            results.add(level);
        }

        return results;
    }
}

二、需要分层遍历
  Queue<T> queue = new LinkedList<>();
  Set<T> set = new HashSet<>();

  set.add(start);
  queue.offer(start);
  while (!queue.isEmpty()) {
    int size = queue.size();
    for (int i = 0; i < size; i++) {
        T head = queue.poll();
        for (T neighbor : head.neighbors) {
            if (!set.contains(neighbor)) {
                set.add(neighbor);
                queue.offer(neighbor);
            }
        }
    }
}


三、无需分层遍历
    Queue<T> queue = new LinkedList<>();
    Set<T> set = new HashSet<>();

    set.add(start);
    queue.offer(start);
    while (!queue.isEmpty()) {
    T head = queue.poll();
    for (T neighbor : head.neighbors) {
      if (!set.contains(neighbor)) {
          set.add(neighbor);
          queue.offer(neighbor);
        }
      }
    }

   （1）neighbor 表示从某个点 head 出发，可以走到的下一层的节点。
   （2）set 存储已经访问过的节点（已经丢到 queue 里去过的节点）
   （3）queue 存储等待被拓展到下一层的节点
   （4）set 与 queue 是一对好基友，无时无刻都一起出现，往 queue 里新增一个节点，就要同时丢到 set 里。
