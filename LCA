Lowest Common Ancestor

public class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode A, TreeNode B) {

        if(root == null || root == A || root == B){// only one node or root unexist，只有一个根节点
            return root;
        }

        //Divide
        TreeNode left = lowestCommonAncestor(root.left, A, B);
        TreeNode right = lowestCommonAncestor(root.right, A, B);

        //Conquer
        if(left != null && right != null){//both exist，A、B分别在左右子树
            return root;
        }

        if(left != null && right == null){//left exist，A、B都在左子树
            return left;
        }

        if(right != null && left == null){//right exist，A、B都在右子树
            return right;
        }

        return null;//both unexist，A、B哪个子树都不在

    }
}
