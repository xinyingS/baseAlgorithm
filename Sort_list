Sort List

Reference from : http://www.jiuzhang.com/solution/sort-list/

Two main thing:
(1) sortList() -> 本身，主方法，recursively calls itself to divide.
(2) merge() -> merge two sorted List.

note:
(1) findMiddle( ) -> (a) head == null || head.next == null
                     (b) while(fast != null && fast.next != null)
(2) first right -> left


public class Solution {

    public ListNode sortList(ListNode head) {
        if(head == null || head.next == null){
            return head;
        }

        ListNode mid = findMiddle(head);
        ListNode right = sortList(mid.next);
        mid.next = null;
        ListNode left = sortList(head);
        return merge(left, right);
    }

    private ListNode findMiddle(ListNode head){
        if(head == null || head.next == null){
            return head;
        }

        ListNode fast = head.next;
        ListNode slow = head;
        while(fast != null && fast.next != null){
            fast = fast.next.next;
            slow = slow.next;
        }
        return slow;
    }

    private ListNode merge(ListNode head1, ListNode head2){
        ListNode dummy = new ListNode(-1);
        ListNode tail = dummy;
        while(head1 != null && head2 != null){
            if(head1.val < head2.val){
                tail.next = head1;
                head1 = head1.next;
                tail = tail.next;
            }else{
                tail.next = head2;
                head2 = head2.next;
                tail = tail.next;
            }
        }

        while(head1 != null){
            tail.next = head1;
            head1 = head1.next;
            tail = tail.next;
        }

        while(head2 != null){
            tail.next = head2;
            head2 = head2.next;
            tail = tail.next;
        }

        return dummy.next;
    }
}
